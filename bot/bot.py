import os
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("notes.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT
        )
    """)
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    note_text = " ".join(context.args)

    if not note_text:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏! –ù–∞–ø—Ä–∏–º–µ—Ä: /add_note –ü–æ–∫—É–ø–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
        return

    conn = sqlite3.connect("notes.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO notes (user_id, text) VALUES (?, ?)", (user_id, note_text))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {note_text}")

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    conn = sqlite3.connect("notes.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, text FROM notes WHERE user_id = ?", (user_id,))
    notes = cursor.fetchall()
    conn.close()

    if not notes:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    notes_list = "\n".join([f"{note[0]}. {note[1]}" for note in notes])
    await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_list}")

# –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        note_id = int(context.args[0])

        conn = sqlite3.connect("notes.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM notes WHERE id = ? AND user_id = ?", (note_id, user_id))
        conn.commit()
        conn.close()

        if cursor.rowcount > 0:
            await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ —Å ID {note_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_note <–Ω–æ–º–µ—Ä>")

# –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
async def clear_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    conn = sqlite3.connect("notes.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM notes WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text("–í—Å–µ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_note <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/show_notes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "/delete_note <–Ω–æ–º–µ—Ä> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/clear_notes ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_note", add_note))
    application.add_handler(CommandHandler("show_notes", show_notes))
    application.add_handler(CommandHandler("delete_note", delete_note))
    application.add_handler(CommandHandler("clear_notes", clear_notes))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
