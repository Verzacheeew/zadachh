import os
import random
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è TMDb API
TMDB_BASE_URL = "https://api.themoviedb.org/3"

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ —Å ID
GENRE_MAP = {
    "–∫–æ–º–µ–¥–∏—è": 35,
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878,
    "–±–æ–µ–≤–∏–∫": 28,
    "–¥—Ä–∞–º–∞": 18,
    "—É–∂–∞—Å—ã": 27,
    "–º–µ–ª–æ–¥—Ä–∞–º–∞": 10749,
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã. "
        "–ò—Å–ø–æ–ª—å–∑—É–π /find_movie <–∂–∞–Ω—Ä>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É, –∏–ª–∏ /recommend –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )

# –ö–æ–º–∞–Ω–¥–∞ /find_movie
async def find_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    genre_name = " ".join(context.args).lower()
    if not genre_name:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä! –ù–∞–ø—Ä–∏–º–µ—Ä: /find_movie –∫–æ–º–µ–¥–∏—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∂–∞–Ω—Ä–∞
    genre_id = GENRE_MAP.get(genre_name)
    if not genre_id:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ TMDb API
    url = f"{TMDB_BASE_URL}/discover/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "with_genres": genre_id,
        "language": "ru-RU",
    }
    response = requests.get(url, params=params)
    data = response.json()

    if data.get("results"):
        movie = random.choice(data["results"])
        title = movie.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = movie.get("release_date", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")[:4]
        await update.message.reply_text(f"üé¨ –§–∏–ª—å–º: {title} ({year})")
    else:
        await update.message.reply_text("–§–∏–ª—å–º–æ–≤ —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /recommend
async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–ø—Ä–æ—Å –∫ TMDb API –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    url = f"{TMDB_BASE_URL}/movie/popular"
    params = {
        "api_key": TMDB_API_KEY,
        "language": "ru-RU",
    }
    response = requests.get(url, params=params)
    data = response.json()

    if data.get("results"):
        movie = random.choice(data["results"])
        title = movie.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = movie.get("release_date", "–ì–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")[:4]
        await update.message.reply_text(f"üåü –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {title} ({year})")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("find_movie", find_movie))
    application.add_handler(CommandHandler("recommend", recommend))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
